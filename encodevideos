#!/bin/bash

# Locations
APPNAME=${0##*/}
CONFDIR="${HOME}/.bashcorder"
CONFFILE="${CONFDIR}/settings.conf"
ENCFILE="${CONFDIR}/encoded.log"
LOGFILE="${CONFDIR}/${APPNAME}.log"
DEPLIST="ffmpeg zenity md5sum"
TMPDIR=$(mktemp -d)
MINSPACE='5'

setup()
{
	PARENT=$(ps --no-headers -o command "$PPID")
	if [[ "$PARENT" =~ .*bash.* ]] ;then
    	OUT="text"
	else
    	OUT="gui"
	fi

    for PROG in $DEPLIST ;do
        if ! which "$PROG" &> /dev/null ;then
			if [[ "$OUT" = 'gui' ]] ;then
            	zenity --error --title="${APPNAME^}" --text="$PROG not installed - exiting" 2>/dev/null
			else
				echo "Error: $PROG not installed - exiting"	
			fi
            exit 1
        fi
    done

    # Source the settings.conf file
    if [[ -e "$CONFFILE" ]] ;then
        source "$CONFFILE"
    fi

	if [[ -f "$ENCFILE" ]] ;then
		touch "$ENCFILE"
	fi
	declare -a SCREENHEAD
	declare -a SCREENOUT
	SCREENHEAD[0]="${APPNAME^}"
	SCREENHEAD[1]=$(for each in $(seq 1 ${#APPNAME}); do printf "="; done)
}

cleanup()
{
	local RC="$1"
	rm -Rf "$TMPDIR"
	exit "$RC"
}

getframe(){
	local PROGRESS="$1"
	local TOTAL="$2"
	local FRAME=$(grep -a '^frame=.*type=[[:space:]][a-Z]' "${PROGRESS}" | awk 'END{print $2}')
    if [[ "${FRAME}" -gt "${TOTAL}" ]]; then
    	FRAME="${TOTAL}"
    fi
	echo "$FRAME"
}

encodevideo()
{
    local VIDFILE="$1"
	VIDNAME=${VIDFILE##*/}
	local COUNT="$2"
	local TOTAL="$3"

    if [[ -f "${VIDFILE%.*}-enc.avi" ]] ;then
    	rm -f "${VIDFILE%.*}-enc.avi"
    fi
	touch "${TMPDIR}/progress.txt"
    ffmpeg -i "$VIDFILE" -c:v "$VFCODEC" -preset "$VFPRESET" -crf "$VFQUAL"  -tune "$VTUNE" -r "$VFPS" -vf format="$VPIXFORMAT" -preset:v "$VPRESET" -acodec copy -x264opts "keyint=${VKEYFRAMES}:min-keyint=${VKEYFRAMES}:scenecut=-1" -vstats_file "${TMPDIR}/progress.txt" "${TMPDIR}/${VIDNAME%.*}-tmp.avi" &> "${TMPDIR}/ffmpeg.txt" &

    FFRC="$?"

	if [[ ! "$FFRC" -eq '0' ]] ;then 
		return 1
	fi

	FFPID="$!"
	FRAME='0'
    PERCENT="0"
	if [[ "$OUT" = 'gui' ]] ;then
    	(
    		while [ -e "/proc/${FFPID}" ]; do
				FRAME=$(getframe "${TMPDIR}/progress.txt" "$TOTAL") 
        		PERCENT="$(( (FRAME * 100) /  TOTAL ))"
				echo "#  Encoding file $COUNT of $TOTALFILES"
        		echo "#  ${VIDFILE} - Encoding frame: $FRAME - ${PERCENT}%"
        		echo "$PERCENT"
        		sleep 2
       		done
		) | zenity --progress --auto-close --width='400' --title="${APPNAME^}" --text="Encoding" --percentage=0 2>/dev/null
		if [[ $? -eq 1 ]];then
        	zenity --question --title="${APPNAME^}" --text "Do you want to cancel encoding all videos? " --ok-label="Yes" --cancel-label="No" 2> /dev/null
        	case $? in
            	    0) cleanup 0 ;;
               		-1) echo "An unexpected error has occurred." ; return 1;;
        	esac
        	(
            	while [ -e "/proc/${FFPID}" ]; do
					FRAME=$(getframe "${TMPDIR}/progress.txt" "$TOTAL") 
                	PERCENT="$(( (FRAME * 100) /  TOTAL ))"
                	echo "#  Encoding file $COUNT of $TOTALFILES"
                	echo "#  ${VIDFILE} - Encoding frame: $FRAME  "
                	echo "$PERCENT"
            		sleep 2
            	done
        	) | zenity --progress --auto-close --width='400' --title="${APPNAME^}" --text="Encoding" --percentage=0 2>/dev/null
    	fi
	else
		 while [ -e "/proc/${FFPID}" ]; do
                FRAME=$(getframe "${TMPDIR}/progress.txt" "$TOTAL") 
				if [[ -z "$FRAME" ]] ;then
					FRAME='0'
				fi
                PERCENT="$(( (FRAME * 100) /  TOTAL ))"
				 
                SCREENOUT[$COUNT]="File: ${VIDFILE} ($COUNT of $TOTALFILES)    Frame: ${FRAME}/${TOTAL}    Done: ${PERCENT}%"
	    	    clear
                for IND in ${!SCREENHEAD[@]} ;do 
                    echo "${SCREENHEAD[$IND]}"
                done

                for IND in ${!SCREENOUT[@]} ;do 
                    echo "${SCREENOUT[$IND]}"
                done
	
                sleep 2
     	done
    fi
    
	if mv -f "${TMPDIR}/${VIDNAME%.*}-tmp.avi" "$VIDFILE" ;then
		SUM=$(tail -c 1024 "${VIDFILE}" | md5sum | awk '{print $1}')
		echo "${VIDFILE}:${SUM}" >> "$ENCFILE"
	else
		if [[ "$OUT" = 'gui' ]]; then
    		zenity --error --title="${APPNAME^}" --text="Unable to move $VIDFILE - exiting" 2>/dev/null
		else
			echo "Error: Unable to move $VIDFILE - exiting"
		fi
        return 1
    fi
	SCREENOUT[$COUNT]="File: ${VIDFILE} ($COUNT of $TOTALFILES)  Done: ${PERCENT}%"
}

setup

if [[ -z "$1" ]] ;then
	if [[ "$OUT" = 'gui' ]]; then
    	zenity --error --title="${APPNAME^}" --text="Must provide vide files to encode - exiting" 2>/dev/null
    else
		echo "Must provide video files to encode" 
    fi
	cleanup 1
fi

COUNTER='1'
ENCFILES=()

for FILE in $(find "$@" -type f -iname "*${VIDTYPE}" | sort --version-sort -f) ;do
	PRESUM=$(tail -c 1024 "${FILE}" | md5sum | awk '{print $1}')
	if ! grep -q "${PRESUM}" "$ENCFILE" ;then
		ENCFILES+=("$FILE")
		echo "Getting frame totals for $FILE"
    	TOTALFRAMES[$COUNTER]=$(ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 "$FILE")
		(( COUNTER++ ))
	fi
done
#COLLONGEST[0]=$(getcolwidth "${ENCFILES[@]}")
#COLLONGEST[1]=$(getcolwidth "${#ENCFILES[@]}")
#COLLONGEST[2]=$(getcolwidth "${TOTALFRAMES[@]}")


TOTALFILES="${#ENCFILES[@]}"
for i in "${!ENCFILES[@]}" ; do
	plusone=$(( i + 1 ))
	if ! encodevideo "${ENCFILES[$i]}" $plusone "${TOTALFRAMES[$plusone]}" ;then
		cleanup 1
	fi	
done


if [[ "$OUT" = 'gui' ]] ;then
	zenity --info --title="${APPNAME}" --text "Encoding Complete" 2>/dev/null
else
	echo "Encoding Complete"
fi

cleanup 0

