#!/bin/bash

set -x

cleanup()
{
	if pgrep ffmpeg &> /dev/null ;then
		killall ffmpeg
	fi

	if [[ "$RAMREC" = 'true' ]] ;then
		if [[ -d "/dev/shm/${APPNAME}" ]] ;then
			rm -Rf "/dev/shm/${APPNAME}"
		fi
	else
		rm -f "${VTMPFILE}"	
	fi
	exit
}

trap 'cleanup' SIGINT SIGTERM

while getopts ":c:av" opt; do
    case $opt in
    	a) RECTYPE='audio' ;;
        v) RECTYPE='auvid' ;;
        c) CONFFILE="$OPTARG" ;;
    esac
done
shift $((OPTIND-1))

# Locations
APPNAME=${0##*/}
CONFDIR="${HOME}/.bashcorder"
if [[ -z "$CONFFILE" ]] ;then		
	CONFFILE="${CONFDIR}/settings.conf"
fi	
LOGFILE="${CONFDIR}/${APPNAME}.log"
DEPLIST="vlc ffmpeg zenity xrandr flock"  
VDIR="${HOME}/Videos"		  

# Do not edit - to override edit ${CONFDIR}/settings.conf or provide a conf file as an argument"
TIMER='5'
if [[ -z "$RECTYPE" ]]; then
	RECTYPE='auvid' 
fi

# Ensure only one copy runs at a time

LOCKFILE="${CONFDIR}/lockfile"
LOCKFD='99'
exlock()			{ flock -xn  $LOCKFD; }
unlock()			{ flock -u $LOCKFD; }
no_more_locking() 	{ flock -u $LOCKFD; flock -xn $LOCKFD && rm -r "$LOCKFILE"; }
prepare_locking()	{ eval "exec $LOCKFD>\"$LOCKFILE\""; trap no_more_locking EXIT;}

prepare_locking 
exlock || exit 1

log()
{
	local MSG="$1"
	echo "$(date '+%b %d %H:%M:%S') ${HOSTNAME} ${APPNAME}: $MSG" >> "$LOGFILE"

}

setup()
{
	for PROG in $DEPLIST ;do
		if ! which "$PROG" &> /dev/null ;then
			zenity --error --title="${APPNAME^}" --text="$PROG not installed - exiting" 2>/dev/null
			exit 1
		fi
	done

	for DIR in "$VDIR" "$CONFDIR" ; do
		if [[ ! -d "$DIR" ]] ;then
			mkdir -p "$DIR"
		fi
	done

	# Source the settings.conf file
	if [[ -e "$CONFFILE" ]] ;then
		source "$CONFFILE"
	fi

	if [[ "$VRES" = 'auto' ]] ;then  
		VRES=$(xdpyinfo | grep "dimensions" | awk '{print $2}') 
	fi
	
	VTMPFILE="${VDIR}/${APPNAME}.${FILETYPE}"
	if [[ "$RAMREC" = 'true' ]] ;then
		if mount | grep -q '/dev/shm' ;then 
			if [[ ! -d "/dev/shm/${APPNAME}" ]] ;then
				mkdir -p "/dev/shm/${APPNAME}"
			fi
			VDIR="/dev/shm/${APPNAME}"
			VTMPFILE="${VDIR}/${APPNAME}.${FILETYPE}"
		else
			log "/dev/shm not active - using $VDIR"
		fi
	fi
}

deletemedia()
{
	local VIDEO="$1"
	zenity --question --title="${APPNAME^}" --text "Do you want to delete this file? " --ok-label="Yes" \ 
       --cancel-label="No" 2> /dev/null
    case $? in
    	0) OP='pickup';;
        1) OP='retake' ;;
        -1) echo "An unexpected error has occurred." ; return 1;;
    esac
	rm -f "$VIDEO"
}

savefile()
{
	if [[ "$RECTYPE" = 'audio' ]] ;then
		SAVENAME=$(zenity --file-selection --filename="$PREVDIR" --save	--title="Save as" --file-filter='Audio files (*.wav) | *.wav' --file-filter='All Files | *' 2>/dev/null)
		case $? in
        	-1) echo "An unexpected error has occurred."; return 1;;
		esac
	elif [[ "$RECTYPE" = 'auvid' ]] ;then 
		SAVENAME=$(zenity --file-selection --filename="$PREVDIR" --save	--title="Save as" --file-filter='MOV files (*.mov) | *.mov' --file-filter='AVI files (*.avi) | *.avi' --file-filter='All Files | *' 2>/dev/null)
		case $? in
        	-1) echo "An unexpected error has occurred."; return 1;;
		esac
	fi

	if [[ ! -z "$SAVENAME" ]] ;then
		if grep -q 'PREVDIR' "$CONFFILE" ;then
			sed -i "s%PREVDIR.*%PREVDIR=\"${SAVENAME%/*}/\"%g" "$CONFFILE" 
		else
			echo "PREVDIR=\"${SAVENAME%/*}/\"" >> "$CONFFILE"
		fi
	else
		if deletemedia "${VTMPFILE}" ; then
			return 
		fi
	fi
	if ! movemedia "${VTMPFILE}" "${SAVENAME}" ;then
		return 1
	fi
	playmedia "${SAVENAME}"
}

stoprecord()
{
	if [[ ! -z "$FFPID" ]] ;then
		kill -INT "$FFPID"
	fi
	RECORDING='false'
	if [[ "$RECTYPE" = 'audio' ]] ;then
		savefile -a
	else
		savefile -v
	fi
	exit 
}

trap 'stoprecord' USR1

# Name the file according to it's type
movemedia(){
	local SRC="$1"
	local DEST="$2"
	if [[ -f "$DEST" ]];then
		zenity --question --title="${APPNAME^}" --text "File exists - overwrite?" --ok-label="Yes" 
		--cancel-label="No" 2> /dev/null
		if [[ "$?" -eq '127' ]] ;then
			zenity --question --title="${APPNAME^}" --text "Is this a pickup or retake" --ok-label="Pickup" \ 
			--cancel-label="Retake" 2> /dev/null
			case $? in
    			0) OP='pickup';;
    			1) OP='retake' ;;
    			-1) echo "An unexpected error has occurred." ; return 1;;
			esac
			EXT="${DEST##*.}"
			REST="${DEST%.*}"
			if [[ "$OP" = 'retake' ]] ;then
				if [[ "$REST" =~ .*[tT][kK].* ]] ;then
					TAKE=${REST##*_}
					REST=${REST%_*} 
					TAKENUM=${TAKE//[[:alpha:]]}
					(( TAKENUM++ ))
					DEST="${REST}_tk${TAKENUM}.${EXT}"
				else
					DEST="${REST}_tk1.${EXT}"
				fi
			fi  
			if [[ "$OP" = 'pickup' ]] ;then
            	if [[ "${REST}" =~ .*[pP][uU].* ]] ;then
                	PU="${REST##*_}"
                	REST="${REST%_*}"
                	PUNUM="${PU//[[:alpha:]]}"
                	(( PUNUM++ ))
                	DEST="${REST}_PU${PUNUM}.${EXT}"
            	else
                	DEST="${REST}_PU1.${EXT}"
            	fi
        	fi  
		fi
	fi
	if ! OUT=$(mv -f "$SRC" "$DEST") ;then
    	zenity --error --title="${APPNAME^}" --text="Unable to move $SRC to $DEST - exiting" 2>/dev/null
		log "Warning: Unable to move $SRC to $DEST"
		log "$OUT"
		return 1
	else
		log "Moved $SRC to $DEST"
	fi
}

playmedia(){
	local VIDFILE="$1"
	if zenity --title="${APPNAME^}" --question --text="Do you want to play this file?" 2>/dev/null ;then
    	log "Viewing $VIDFILE"
		$VIDPLAYER $VIDFILE
	   	# vlc -q --play-and-exit "$VIDFILE" vlc://quit 2> /dev/null 
	fi
}

startrecord()
{
	if [[ -f "${VTMPFILE}" ]] ;then
		rm -f "${VTMPFILE}"
	fi

	if [[ "$RECTYPE" = 'audio' ]] ;then
		(
			for i in $(seq "$TIMER" -1 1) ;do
				echo "#Recording audio in $i " 
				sleep 1
			done
		) | zenity --progress --auto-close --title="${APPNAME^}" --text="Recording audio" --pulsate 2>/dev/null
	else
		(
			for i in $(seq "$TIMER" -1 1) ;do
				echo "#Recording video in $i " 
				sleep 1
			done
		) | zenity --progress --auto-close --title="${APPNAME^}" --text="Recording audio and video" --pulsate 2>/dev/null
	fi	

	if [[ "$?" -eq '1' ]] ; then
	   	zenity --warning --title="${APPNAME^}" --text="Recording Canceled" 2>/dev/null
       	return 1
	else
		RECORDING='true'
		if [[ "$RECTYPE" = 'audio' ]] ;then
			log "Starting new audio recording"
			ffmpeg -thread_queue_size "$QUEUE" -f "$ATYPE" -i "$ADEV" -ar "$ARATE" -ac "$ACHANNELS" \
	    	-acodec "$ACODEC" "${VTMPFILE}" &>/dev/null & 
	    	FFPID="$!"
			if [[ -z "$FFPID" ]] ;then
				return 1
			fi
	    	while [ "$RECORDING" = 'true' ] ; do
				if ! kill -0 "$FFPID" ;then
					return 1
				fi
				sleep 1
	    	done
		elif [[ "$RECTYPE" = 'auvid' ]] ;then
			log "Starting new audio/video recording"
			ffmpeg -y -thread_queue_size "$QUEUE" -f "$VTYPE" -s "$VRES" -r "$VFPS" -i "$VSCREEN" \
	    		-thread_queue_size "$QUEUE" -f "$ATYPE" -i "$ADEV" -ar "$ARATE" -ac "$ACHANNELS" \
	    		-acodec "$ACODEC" -c:v "${VCODEC}" -r "$VFPS" \
			-vf format="${VPIXFORMAT}" -profile:v "${VPROFILE}" "${VTMPFILE}" &>/dev/null & 
	    		FFPID="$!"
			if [[ -z "$FFPID" ]] ;then
				return 1
			fi
	    	while [ "$RECORDING" = 'true' ] ; do
				if ! kill -0 "$FFPID" ;then
					return 1
				fi
				sleep 1
	    	done
		fi
	fi
}

setup

echo $VTMPFILE > /tmp/vtmpfile.txt
echo $CONFFILE >> /tmp/vtmpfile.txt


if ! startrecord  ; then
	case $RECTYPE in
		audio) log "Warning: Unable to start audio recording" ;;
		auvid) log "Warning: Unable to start video recording" ;;
	esac
	exit 1
fi




